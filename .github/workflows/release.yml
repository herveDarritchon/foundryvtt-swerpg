# GitHub Actions workflow for creating a new FoundryVTT system release.
#
# Useful References:
#   - https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions
#   - https://docs.github.com/en/actions/learn-github-actions/contexts
#   - https://docs.github.com/en/actions/learn-github-actions/environment-variables
#
# Troubleshooting Checklist:
#   - Is the module's manifest file valid JSON?
#     You can test your manifest file using https://jsonlint.com/.
#
#   - Does the module's manifest have all the required keys?
#     See https://foundryvtt.com/article/module-development/#manifest for more
#     information.
#
#   - Are all the proper files and directories being included in the release's
#     module archive ("module.zip")?
#     Check that the correct files are being passed to the `zip` command run
#     in the "Create Module Archive" step below.
#
#   - Is the release tag the proper format?
#     See the comments for the "Extract Version From Tag" step below.
#
#   - Is a GitHub release being published?
#     This workflow will only run when a release is published, not when a
#     release is updated. Furthermore, note that while a GitHub release will
#     (by default) create a repository tag, a repository tag will not create
#     or publish a GitHub release.
#
#   - Has the module's entry on FoundryVTT's module administration site
#     (https://foundryvtt.com/admin) been updated?
#
name: Release System with Semantic Release

env:
  # The URL used for the module's "Project URL" link on FoundryVTT's website.
  project_url: "https://github.com/${{github.repository}}"

  # A URL that will always point to the latest manifest.
  # FoundryVTT uses this URL to check whether the current module version that
  # is installed is the latest version. This URL should NOT change,
  # otherwise FoundryVTT won't be able to perform this check.
  latest_manifest_url: "https://github.com/${{github.repository}}/releases/latest/download/system.json"

  # The URL to the module archive associated with the module release being
  # processed by this workflow.
  release_module_url: "https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/system.zip"

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    name: Semantic Release
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: üìÜ Checkout
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: üì¶ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üîç Get next version
        id: get_next_version
        run: |
          VERSION=$(node ./get-next-version.mjs | tail -n 1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: üß™ Echo the next version
        run: |
          echo "Semantic Release would produce version: ${{ steps.get_next_version.outputs.version }}"
      

      # Modify "module.json" with values specific to the release.
      # Since the values for the "version" and "url" keys aren't known ahead of
      # time, the manifest file in the repository is updated with these values.
      #
      # While this does modify the manifest file in-place, the changes are not
      # commited to the repository, and only exist in the action's filesystem.
      - name: Modify Module Manifest With Release-Specific Values
        id: sub_manifest_link_version
        uses: cschleiden/replace-tokens@v1
        with:
          files: 'system.json'
        env:
          VERSION: ${{ steps.next_version.outputs.version }}
          URL: ${{ env.project_url }}
          MANIFEST: ${{ env.latest_manifest_url }}
          DOWNLOAD: ${{ env.release_module_url }}

      - name: üèóÔ∏è Build system assets
        run: pnpm run build

      # Pull YAML to LDB packs
      - name: üß∞ Build Packs
        run: pnpm run extractPacks

      # Create a "system.zip" archive containing all the module's required files.
      # If you have other directories or files that will need to be added to
      # your packaged module, add them here.
      - name: üß© Create Module Archive
        run: |
          # Note that `zip` will only emit warnings when a file or directory
          # doesn't exist, it will not fail.
          zip                                    \
            `# Options`                          \
            --recurse-paths                      \
            `# The name of the output file`      \
             ./system.zip                        \
            `# The files that will be included.` \
            system.json                          \
            swerpg.mjs                         \
            README.md                            \
            CHANGELOG.md                         \
            LICENSE                              \
            assets/                              \
            css/                                 \
            packs/                               \
            fonts/                               \
            lang/                                \
            module/                              \
            sounds/                              \
            templates/                           
          # Don't forget to add a backslash at the end of the line for any
          # additional files or directories!

      - name: üìÇ Check if system.zip and system.json exist
        run: |
          echo "Current directory: $(pwd)"
          ls -lah
          ls -lah system.json || echo "system.json NOT FOUND"
          ls -lah system.zip || echo "system.zip NOT FOUND"

      - name: ùåö Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBUG: semantic-release:*
        run: npx semantic-release --extends ./release.js

      - name: üìù Append GitHub diff link to CHANGELOG.md
        run: node ./append-links-to-changelog.cjs
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
          PREV_RELEASE_VERSION: ${{ env.PREV_RELEASE_VERSION }}